#
# Define how to use third party, i.e.
# - include directory
# - library
# - preprocessor definitions needed by package
#

IF(MSVC)
	# Beware, $(ConfigurationName) is not a cmake variable: it
	# will only be expanded by VS during the build/link step.
	# Same for $(PlatformName)
	SET(BOOST_INCLUDE_DIR ${BoostRootDir}/include)
	SET(BOOST_LIBRARY_DIR ${BoostRootDir}/lib/x64/$(ConfigurationName))
	SET(BOOST_DEFINITIONS "/D BOOST_ALL_DYN_LINK")

	# Using auto-linking, so we can leave these variables empty
	SET(BOOST_FILESYSTEM_LIBRARY)
	SET(BOOST_THREAD_LIBRARY)
	SET(BOOST_SYSTEM_LIBRARY)
	SET(BOOST_UNIT_TEST_LIBRARY)
	SET(BOOST_PYTHON_LIBRARY)
	SET(BOOST_PROGRAM_OPTIONS)
	SET(BOOST_DATE_TIME)
	SET(BOOST_RANDOM)
	SET(BOOST_CHRONO)
	SET(BOOST_LOCALE)
	MARK_AS_ADVANCED(
		BOOST_INCLUDE_DIR BOOST_LIBRARY_DIR BOOST_DEFINITIONS
	)
ENDIF(MSVC)

IF(UNIX)
        SET(BOOST_LIB_NAME_ENDING .so.1.65.1)
        SET(BOOST_MT_LIB_NAME_ENDING -gcc48-mt-1_63-z43)
        SET(BOOST_DEFINITIONS "-DBOOST_TEST_DYN_LINK")

        SET(BOOST_INCLUDE_DIR /usr/local/include)
        SET(BOOST_LIBRARY_DIR /usr/local/lib)

        SET(BOOST_FILESYSTEM_LIBRARY boost_filesystem${BOOST_LIB_NAME_ENDING})
        SET(BOOST_THREAD_LIBRARY libboost_thread${BOOST_MT_LIB_NAME_ENDING})
        SET(BOOST_SYSTEM_LIBRARY libboost_system)
        SET(BOOST_UNIT_TEST_LIBRARY libboost_unit_test_framework${BOOST_LIB_NAME_ENDING})
        SET(BOOST_PYTHON_LIBRARY libboost_python${BOOST_LIB_NAME_ENDING})
        SET(BOOST_PROGRAM_OPTIONS libboost_program_options${BOOST_LIB_NAME_ENDING})
        SET(BOOST_DATE_TIME libboost_date_time${BOOST_LIB_NAME_ENDING})
        SET(BOOST_RANDOM libboost_random${BOOST_LIB_NAME_ENDING})
        SET(BOOST_SERIALIZATION libboost_serialization${BOOST_LIB_NAME_ENDING})
        SET(BOOST_CHRONO libboost_chrono${BOOST_LIB_NAME_ENDING})
        SET(BOOST_REGEXP libboost_regex${BOOST_LIB_NAME_ENDING})
ENDIF(UNIX)

MACRO(USE_BOOST_HEADERS)
	INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})
	LINK_DIRECTORIES(${BOOST_LIBRARY_DIR})
	ADD_DEFINITIONS(${BOOST_DEFINITIONS})

	SET(BOOST_LIBRARIES
		boost_system
		#${BOOST_PROGRAM_OPTIONS}
		#${BOOST_FILESYSTEM_LIBRARY}
		#${BOOST_SYSTEM_LIBRARY}
		#${BOOST_THREAD_LIBRARY}
		#${BOOST_UNIT_TEST_LIBRARY}
		#${BOOST_CHRONO}
		#${BOOST_REGEX}
	)
ENDMACRO()

MACRO(USE_BOOST)
	USE_BOOST_HEADERS()

	LIST( APPEND MY_EXTERNAL_LINK_LIBRARIES ${BOOST_LIBRARIES} )
	#REMEMBER_TO_CALL_THIS_INSTALL_MACRO( INSTALL_RUNTIME_LIBRARIES_BOOST )
ENDMACRO()

MACRO(INSTALL_RUNTIME_LIBRARIES_BOOST)
	MESSAGE( STATUS "--> ThirdPartyBoost: installing boost library ..." )
	IF(CMAKE_COMPILER_IS_GNUCXX)
		IF(APPLE)
			FILE(COPY ${BOOST_LIBRARY_DIR}/
				DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
				FILES_MATCHING PATTERN "*.dylib")
		ELSE()
			FILE(COPY ${BOOST_LIBRARY_DIR}/
				DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
				FILES_MATCHING PATTERN "*${BOOST_VERSION}.so*" )
		ENDIF()
	ELSEIF(MSVC)
		FOREACH(BUILD_TYPE ${CMAKE_CONFIGURATION_TYPES})
			FILE(COPY ${BOOST_LIBRARY_DIR}/../${BUILD_TYPE}/
				DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${BUILD_TYPE}
				FILES_MATCHING PATTERN "*.dll" PATTERN "*.pdb" PATTERN ".svn" EXCLUDE )
		ENDFOREACH()
	ENDIF()
ENDMACRO()
