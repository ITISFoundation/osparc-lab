#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from modeler import Modeler
from modeler.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ApiVersion GetApiVersion()')
    print('  Entity GetRootGroup()')
    print('   GetEntities()')
    print('   GetFilteredEntities(EntityFilterType filterType)')
    print('  void RemoveEntity(string uuid)')
    print('  void ImportModel(string file_path_utf8)')
    print('  string CreateSolidCylinder(Vertex pointA, Vertex pointB, double radius, string uuid)')
    print('  string CreateSolidSphere(Vertex center, double radius, string uuid)')
    print('  string CreateSolidBlock(Vertex pointA, Vertex pointB, string uuid)')
    print('  string CreateMesh(EntityMesh mesh, string uuid)')
    print('  string CreateSpline(EntityLine spline_control_points, string uuid)')
    print('   GetEntityMeshes(string uuid, bool get_normals)')
    print('  EncodedScene GetEntitiesEncodedScene( list_of_uuids, SceneFileFormat format)')
    print('   CreateEntitiesFromScene(EncodedScene scene)')
    print('   GetEntityWire(string uuid)')
    print('  void TransformOperation( list_of_uuids,  transform4x4)')
    print('  string CutOperation( list_of_uuids, Vertex point_on_plane, Vector normal)')
    print('  string BooleanOperation( list_of_uuids, BooleanOperationType type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Modeler.Client(protocol)
transport.open()

if cmd == 'GetApiVersion':
    if len(args) != 0:
        print('GetApiVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetApiVersion())

elif cmd == 'GetRootGroup':
    if len(args) != 0:
        print('GetRootGroup requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetRootGroup())

elif cmd == 'GetEntities':
    if len(args) != 0:
        print('GetEntities requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetEntities())

elif cmd == 'GetFilteredEntities':
    if len(args) != 1:
        print('GetFilteredEntities requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetFilteredEntities(eval(args[0]),))

elif cmd == 'RemoveEntity':
    if len(args) != 1:
        print('RemoveEntity requires 1 args')
        sys.exit(1)
    pp.pprint(client.RemoveEntity(args[0],))

elif cmd == 'ImportModel':
    if len(args) != 1:
        print('ImportModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.ImportModel(args[0],))

elif cmd == 'CreateSolidCylinder':
    if len(args) != 4:
        print('CreateSolidCylinder requires 4 args')
        sys.exit(1)
    pp.pprint(client.CreateSolidCylinder(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'CreateSolidSphere':
    if len(args) != 3:
        print('CreateSolidSphere requires 3 args')
        sys.exit(1)
    pp.pprint(client.CreateSolidSphere(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'CreateSolidBlock':
    if len(args) != 3:
        print('CreateSolidBlock requires 3 args')
        sys.exit(1)
    pp.pprint(client.CreateSolidBlock(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'CreateMesh':
    if len(args) != 2:
        print('CreateMesh requires 2 args')
        sys.exit(1)
    pp.pprint(client.CreateMesh(eval(args[0]), args[1],))

elif cmd == 'CreateSpline':
    if len(args) != 2:
        print('CreateSpline requires 2 args')
        sys.exit(1)
    pp.pprint(client.CreateSpline(eval(args[0]), args[1],))

elif cmd == 'GetEntityMeshes':
    if len(args) != 2:
        print('GetEntityMeshes requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetEntityMeshes(args[0], eval(args[1]),))

elif cmd == 'GetEntitiesEncodedScene':
    if len(args) != 2:
        print('GetEntitiesEncodedScene requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetEntitiesEncodedScene(eval(args[0]), eval(args[1]),))

elif cmd == 'CreateEntitiesFromScene':
    if len(args) != 1:
        print('CreateEntitiesFromScene requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateEntitiesFromScene(eval(args[0]),))

elif cmd == 'GetEntityWire':
    if len(args) != 1:
        print('GetEntityWire requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetEntityWire(args[0],))

elif cmd == 'TransformOperation':
    if len(args) != 2:
        print('TransformOperation requires 2 args')
        sys.exit(1)
    pp.pprint(client.TransformOperation(eval(args[0]), eval(args[1]),))

elif cmd == 'CutOperation':
    if len(args) != 3:
        print('CutOperation requires 3 args')
        sys.exit(1)
    pp.pprint(client.CutOperation(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'BooleanOperation':
    if len(args) != 2:
        print('BooleanOperation requires 2 args')
        sys.exit(1)
    pp.pprint(client.BooleanOperation(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
